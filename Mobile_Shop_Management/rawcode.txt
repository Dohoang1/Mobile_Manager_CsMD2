package Controller;

public class Admin {
    private static Admin instance;
    private String username;
    private String password;

    private Admin() {
        this.username = "dohoang";
        this.password = "adminpro";
    }

    public static Admin getInstance() {
        if (instance == null) {
            instance = new Admin();
        }
        return instance;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    @Override
    public String toString() {
        return "Admin{" +
                "username='" + username + '\'' +
                ", password='" + password + '\'' +
                '}';
    }
}

package Controller;

public class Customer {
    private String username;
    private String password;

    public Customer(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "username='" + username + '\'' +
                ", password='" + password + '\'' +
                '}';
    }
}


package Entities;

public class Charger extends Product {
    private String cableType;
    private String cableLength;

    private Charger(Builder builder) {
        super(builder);
        this.cableType = builder.cableType;
        this.cableLength = builder.cableLength;
    }

    public String getCableType() {
        return cableType;
    }

    public void setCableType(String cableType) {
        this.cableType = cableType;
    }

    public String getCableLength() {
        return cableLength;
    }

    public void setCableLength(String cableLength) {
        this.cableLength = cableLength;
    }

    public static class Builder extends Product.Builder<Builder> {
        private String cableType;
        private String cableLength;

        public Builder setCableType(String cableType) {
            this.cableType = cableType;
            return this;
        }

        public Builder setCableLength(String cableLength) {
            this.cableLength = cableLength;
            return this;
        }

        @Override
        public Charger build() {
            return new Charger(this);
        }
    }

    @Override
    public String toString() {
        return super.toString() +
                "Charger{" +
                "cableType='" + cableType + '\'' +
                ", cableLength='" + cableLength + '\'' +
                '}';
    }

    @Override
    public String toCSV() {
        return super.toCSV() + "," + cableType + "," + cableLength;
    }
}


package Entities;

public class Mobile extends Product {
    private String os;

    private Mobile(Builder builder) {
        super(builder);
        this.os = builder.os;
    }

    public String getOs() {
        return os;
    }

    public void setOs(String os) {
        this.os = os;
    }

    public static class Builder extends Product.Builder<Builder> {
        private String os;

        public Builder setOs(String os) {
            this.os = os;
            return this;
        }

        @Override
        public Mobile build() {
            return new Mobile(this);
        }
    }

    @Override
    public String toString() {
        return super.toString() + "Mobile{" + "os=" + os + '}';
    }

    @Override
    public String toCSV() {
        return super.toCSV() + "," + os;
    }
}

package Entities;

public class MobileCase extends Product {
    private String useFor;

    private MobileCase(Builder builder) {
        super(builder);
        this.useFor = builder.useFor;
    }

    public String getUseFor() {
        return useFor;
    }

    public void setUseFor(String useFor) {
        this.useFor = useFor;
    }

    public static class Builder extends Product.Builder<Builder> {
        private String useFor;

        public Builder setUseFor(String useFor) {
            this.useFor = useFor;
            return this;
        }

        @Override
        public MobileCase build() {
            return new MobileCase(this);
        }
    }

    @Override
    public String toString() {
        return super.toString() +
                "MobileCase{" +
                "useFor='" + useFor + '\'' +
                '}';
    }

    @Override
    public String toCSV() {
        return super.toCSV() + "," + useFor;
    }
}

package Entities;

import java.util.Objects;

import static Service.CurrencyFormatter.formatToVND;

public abstract class Product {
    private String name;
    private String brand;
    private String id;
    private String color;
    private int price;
    private int stock;
    private String status;

    protected Product(Builder<?> builder) {
        this.name = builder.name;
        this.brand = builder.brand;
        this.id = builder.id;
        this.color = builder.color;
        this.price = builder.price;
        this.stock = builder.stock;
        this.status = builder.status;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public int getStock() {
        return stock;
    }

    public void setStock(int stock) {
        this.stock = stock;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public abstract static class Builder<T extends Builder<T>> {
        protected String name;
        protected String brand;
        protected String id;
        protected String color;
        protected int price;
        protected int stock;
        protected String status;

        public T setName(String name) {
            this.name = name;
            return (T) this;
        }

        public T setBrand(String brand) {
            this.brand = brand;
            return (T) this;
        }

        public T setId(String id) {
            this.id = id;
            return (T) this;
        }

        public T setColor(String color) {
            this.color = color;
            return (T) this;
        }

        public T setPrice(int price) {
            this.price = price;
            return (T) this;
        }

        public T setStock(int stock) {
            this.stock = stock;
            return (T) this;
        }

        public T setStatus(String status) {
            this.status = status;
            return (T) this;
        }

        public abstract Product build();
    }

    @Override
    public String toString() {
        return "Product{" +
                "name='" + name + '\'' +
                ", brand='" + brand + '\'' +
                ", ID='" + id + '\'' +
                ", color='" + color + '\'' +
                ", price=" + formatToVND(price) +
                ", stock=" + stock +
                ", status='" + status + '\'' +
                '}';
    }

    public String toCSV() {
        return name + "," + brand + "," + id + "," + color + "," + price + "," + stock + "," + status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Product product = (Product) o;
        return Objects.equals(id, product.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}

package Factory;

import Entities.Charger;
import Entities.Product;

import java.util.Scanner;

public class ChargerFactory extends ProductFactory {
    @Override
    public Product createProduct(Scanner input) {
        System.out.println("Add new Charger");
        return new Charger.Builder()
                .setName(promptForInput(input, "Enter name:"))
                .setBrand(promptForInput(input, "Enter brand:"))
                .setId(promptForInput(input, "Enter ID:"))
                .setColor(promptForInput(input, "Enter color:"))
                .setPrice(Integer.parseInt(promptForInput(input, "Enter price:")))
                .setStock(Integer.parseInt(promptForInput(input, "Enter stock:")))
                .setStatus(promptForInput(input, "Enter status:"))
                .setCableType(promptForInput(input, "Enter cable type:"))
                .setCableLength(promptForInput(input, "Enter cable length:"))
                .build();
    }
}

package Factory;

import Entities.MobileCase;
import Entities.Product;

import java.util.Scanner;

public class MobileCaseFactory extends ProductFactory {
    @Override
    public Product createProduct(Scanner input) {
        System.out.println("Add new MobileCase");
        return new MobileCase.Builder()
                .setName(promptForInput(input, "Enter name:"))
                .setBrand(promptForInput(input, "Enter brand:"))
                .setId(promptForInput(input, "Enter ID:"))
                .setColor(promptForInput(input, "Enter color:"))
                .setPrice(Integer.parseInt(promptForInput(input, "Enter price:")))
                .setStock(Integer.parseInt(promptForInput(input, "Enter stock:")))
                .setStatus(promptForInput(input, "Enter status:"))
                .setUseFor(promptForInput(input, "Enter mobile suit:"))
                .build();
    }
}

package Factory;

import Entities.Mobile;
import Entities.Product;

import java.util.Scanner;

public class MobileFactory extends ProductFactory {
    @Override
    public Product createProduct(Scanner input) {
        System.out.println("Add new Mobile");
        return new Mobile.Builder()
                .setName(promptForInput(input, "Enter name:"))
                .setBrand(promptForInput(input, "Enter brand:"))
                .setId(promptForInput(input, "Enter ID:"))
                .setColor(promptForInput(input, "Enter color:"))
                .setPrice(Integer.parseInt(promptForInput(input, "Enter price:")))
                .setStock(Integer.parseInt(promptForInput(input, "Enter stock:")))
                .setStatus(promptForInput(input, "Enter status:"))
                .setOs(promptForInput(input, "Enter OS:"))
                .build();
    }
}

package Factory;

import Entities.Product;

import java.util.Scanner;

public abstract class ProductFactory {

    public abstract Product createProduct(Scanner input);

    protected String promptForInput(Scanner input, String prompt) {
        System.out.println(prompt);
        return input.nextLine();
    }
}

package Main;

import Management.ApplicationManager;

public class Main {
    public static void main(String[] args) {
        ApplicationManager.run();
    }
}

package Management;
import Service.FileService;

public class ApplicationManager {
    private static DataManagement dataManagement;
    private static MenuManagement menuManagement;

    public static void run() {
        initialize();
        initializeData();
        runMainMenu();
        saveData();
    }

    private static void initialize() {
        dataManagement = new DataManagement();
        menuManagement = new MenuManagement(
                dataManagement.getCustomers(),
                dataManagement.getMobiles(),
                dataManagement.getChargers(),
                dataManagement.getMobileCases()
        );
    }

    private static void initializeData() {
        FileService.readProductsFromCSV(
                dataManagement.getMobiles(),
                dataManagement.getChargers(),
                dataManagement.getMobileCases()
        );
        FileService.readCustomersFromCSV(dataManagement.getCustomers());
    }

    private static void runMainMenu() {
        menuManagement.mainMenu();
    }

    private static void saveData() {
        FileService.writeProductsToCSV(
                dataManagement.getMobiles(),
                dataManagement.getChargers(),
                dataManagement.getMobileCases()
        );
        FileService.writeCustomersToCSV(dataManagement.getCustomers());
    }
}

package Management;

import Controller.Customer;
import Entities.Charger;
import Entities.Mobile;
import Entities.MobileCase;

import java.util.ArrayList;

public class DataManagement {
    private static ArrayList<Customer> customers = new ArrayList<>();
    private static ArrayList<Mobile> mobiles = new ArrayList<>();
    private static ArrayList<Charger> chargers = new ArrayList<>();
    private static ArrayList<MobileCase> mobileCases = new ArrayList<>();

    public static ArrayList<Customer> getCustomers() {
        return customers;
    }

    public static ArrayList<Mobile> getMobiles() {
        return mobiles;
    }

    public static ArrayList<Charger> getChargers() {
        return chargers;
    }

    public static ArrayList<MobileCase> getMobileCases() {
        return mobileCases;
    }
}

package Management;

import Controller.Customer;
import Entities.Charger;
import Entities.Mobile;
import Entities.MobileCase;

import java.util.ArrayList;
import java.util.Scanner;

public class MenuManagement {
    private MenuUI menuUI;

    public MenuManagement(ArrayList<Customer> customers, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        Scanner input = new Scanner(System.in);
        this.menuUI = new MenuUI(input, customers, mobiles, chargers, mobileCases);
    }

    public void mainMenu() {
        menuUI.mainMenu();
    }
}

package Management;

import Controller.Admin;
import Controller.Customer;
import Entities.Charger;
import Entities.Mobile;
import Entities.MobileCase;
import Entities.Product;
import Service.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class MenuUI {
    private Scanner input;
    private ArrayList<Customer> customers;
    private ArrayList<Mobile> mobiles;
    private ArrayList<Charger> chargers;
    private ArrayList<MobileCase> mobileCases;

    public MenuUI(Scanner input, ArrayList<Customer> customers, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        this.input = input;
        this.customers = customers;
        this.mobiles = mobiles;
        this.chargers = chargers;
        this.mobileCases = mobileCases;
    }

    public void mainMenu() {
        int choice;
        do {
            System.out.println("Welcome to DHStore");
            System.out.println("1. Login");
            System.out.println("2. Register as customer");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            choice = getIntInput();
            switch (choice) {
                case 1:
                    loginMenu();
                    break;
                case 2:
                    register();
                    break;
                case 0:
                    System.out.println("Exiting program... ");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);
    }

    private void loginMenu() {
        System.out.println("Login Menu");
        System.out.println("1. Login as customer");
        System.out.println("2. login as admin");
        System.out.println("0. Return");
        System.out.print("Enter your choice: ");
        int choice = getIntInput();
        switch (choice) {
            case 1:
                customerLogin();
                break;
            case 2:
                adminLogin();
                break;
            case 0:
                System.out.println("Returning to main menu...");
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
        }
    }

    private void register() {
        System.out.println("Enter username: ");
        String username = input.nextLine();
        System.out.println("Enter password: ");
        String password = input.nextLine();
        CustomerService.addCustomer(customers, username, password);
        System.out.println("Register successful");
    }

    private void customerLogin() {
        System.out.print("Enter username: ");
        String username = input.nextLine();
        System.out.print("Enter password: ");
        String password = input.nextLine();
        Customer customer = CustomerService.findCustomerByUsername(customers, username);
        if (customer != null && customer.getPassword().equals(password)) {
            System.out.println("Login successful. Welcome " + username + "!");
            customerMenu(customer);
        } else {
            System.out.println("Invalid username or password. Please try again.");
        }
    }

    private void adminLogin() {
        Admin admin = Admin.getInstance();
        System.out.print("Enter admin username: ");
        String username = input.nextLine();
        System.out.print("Enter admin password: ");
        String password = input.nextLine();
        if (admin.getUsername().equals(username) && admin.getPassword().equals(password)) {
            System.out.println("Admin login successful. Welcome Admin!");
            adminMenu();
        } else {
            System.out.println("Invalid admin user. Please try again.");
        }
    }

    private void customerMenu(Customer customer) {
        ArrayList<Product> cart = new ArrayList<>();
        int choice;
        do {
            System.out.println("===== Customer Menu =====");
            System.out.println("1. Show All Products");
            System.out.println("2. Add Product to Cart");
            System.out.println("3. Show Cart");
            System.out.println("4. Checkout");
            System.out.println("5. View Purchase History");
            System.out.println("0. Logout");
            System.out.print("Please choose an option: ");
            choice = getIntInput();
            switch (choice) {
                case 1:
                    ProductManagement.showAllProducts(mobiles, chargers, mobileCases);
                    break;
                case 2:
                    CartService.addProductToCart(cart, mobiles, chargers, mobileCases, input);
                    break;
                case 3:
                    CartService.showCart(cart);
                    break;
                case 4:
                    CartService.checkout(cart, mobiles, chargers, mobileCases, customer);
                    break;
                case 5:
                    viewCustomerPurchaseHistory(customer.getUsername());
                    break;
                case 0:
                    System.out.println("Logging out...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);
    }

    private void adminMenu() {
        int choice;
        do {
            System.out.println("\n Admin Menu");
            System.out.println("1. Add new Product");
            System.out.println("2. Delete Product");
            System.out.println("3. Edit Product");
            System.out.println("4. Show all Products");
            System.out.println("5. View All Customers' Purchase History");
            System.out.println("0. Exit");
            choice = getIntInput();
            switch (choice) {
                case 1:
                    addNewProductMenu();
                    break;
                case 2:
                    ProductManagement.deleteProduct(input, mobiles, chargers, mobileCases);
                    break;
                case 3:
                    ProductManagement.editProduct(input, mobiles, chargers, mobileCases);
                    break;
                case 4:
                    ProductManagement.showAllProducts(mobiles, chargers, mobileCases);
                    break;
                case 5:
                    viewAllCustomersPurchaseHistory();
                    break;
                case 0:
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);
    }


    void addNewProductMenu() {
        System.out.println("Add new Product");
        System.out.println("1. Add new Mobile");
        System.out.println("2. Add new Charger");
        System.out.println("3. Add new MobileCase");
        System.out.println("0. Return");
        int choice = getIntInput();

        switch (choice) {
            case 1:
                MobileService.addMobile(mobiles, input);
                break;
            case 2:
                ChargerService.addCharger(chargers, input);
                break;
            case 3:
                MobileCaseService.addMobileCase(mobileCases, input);
                break;
            case 0:
                return;
            default:
                System.out.println("Invalid choice. Please try again.");
                return;
        }

        FileService.writeProductsToCSV(mobiles, chargers, mobileCases);
    }

    private int getIntInput() {
        try {
            return Integer.parseInt(input.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter a number.");
            return -1;
        }
    }

    public void showAllProducts() {
        System.out.println("===== All Products =====");
        showAllMobiles();
        showAllChargers();
        showAllMobileCases();
    }

    public void showAllMobiles() {
        if (mobiles.isEmpty()) {
            System.out.println("No mobile products available.");
        } else {
            System.out.println("===== Mobile Phone List =====");
            for (Mobile mobile : mobiles) {
                System.out.println("------------------------------");
                System.out.println("Name: " + mobile.getName());
                System.out.println("Brand: " + mobile.getBrand());
                System.out.println("ID: " + mobile.getId());
                System.out.println("Color: " + mobile.getColor());
                System.out.println("OS: " + mobile.getOs());
                System.out.println("Price: " + CurrencyFormatter.formatToVND(mobile.getPrice()));
                System.out.println("Stock: " + mobile.getStock());
                System.out.println("Status: " + mobile.getStatus());
            }
            System.out.println("------------------------------");
        }
    }

    public void showAllChargers() {
        if (chargers.isEmpty()) {
            System.out.println("No charger products available.");
        } else {
            System.out.println("===== Charger List =====");
            for (Charger charger : chargers) {
                System.out.println("------------------------------");
                System.out.println("Name: " + charger.getName());
                System.out.println("Brand: " + charger.getBrand());
                System.out.println("ID: " + charger.getId());
                System.out.println("Color: " + charger.getColor());
                System.out.println("Cable Type: " + charger.getCableType());
                System.out.println("Cable Length: " + charger.getCableLength());
                System.out.println("Price: " + CurrencyFormatter.formatToVND(charger.getPrice()));
                System.out.println("Stock: " + charger.getStock());
                System.out.println("Status: " + charger.getStatus());
            }
            System.out.println("------------------------------");
        }
    }

    public void showAllMobileCases() {
        if (mobileCases.isEmpty()) {
            System.out.println("No mobile case products available.");
        } else {
            System.out.println("===== Mobile Case List =====");
            for (MobileCase mobileCase : mobileCases) {
                System.out.println("------------------------------");
                System.out.println("Name: " + mobileCase.getName());
                System.out.println("Brand: " + mobileCase.getBrand());
                System.out.println("ID: " + mobileCase.getId());
                System.out.println("Color: " + mobileCase.getColor());
                System.out.println("Use For: " + mobileCase.getUseFor());
                System.out.println("Price: " + CurrencyFormatter.formatToVND(mobileCase.getPrice()));
                System.out.println("Stock: " + mobileCase.getStock());
                System.out.println("Status: " + mobileCase.getStatus());
            }
            System.out.println("------------------------------");
        }
    }

    private void viewCustomerPurchaseHistory(String username) {
        Map<String, List<String>> history = PurchaseHistoryService.getCustomerPurchaseHistory(username);
        if (history.isEmpty() || !history.containsKey(username)) {
            System.out.println("No purchase history found for " + username);
        } else {
            System.out.println("===== Purchase History =====");
            System.out.println("Name: " + username);
            List<String> entries = history.get(username);
            for (String entry : entries) {
                System.out.println(entry);
            }
            if (history.containsKey("Total")) {
                System.out.println("Total purchased: " + history.get("Total").get(0));
            }
        }
    }

    private void viewAllCustomersPurchaseHistory() {
        Map<String, Map<String, List<String>>> allHistory = PurchaseHistoryService.getAllCustomersPurchaseHistory();
        if (allHistory.isEmpty()) {
            System.out.println("No purchase history found for any customer.");
        } else {
            System.out.println("===== All Customers' Purchase History =====");
            for (Map.Entry<String, Map<String, List<String>>> customerEntry : allHistory.entrySet()) {
                String username = customerEntry.getKey();
                Map<String, List<String>> history = customerEntry.getValue();
                System.out.println("Name: " + username);
                List<String> entries = history.get(username);
                for (String entry : entries) {
                    System.out.println(entry);
                }
                System.out.println("Total purchased: " + history.get("Total").get(0));
                System.out.println();
            }
        }
    }
}

package Management;

import Entities.Mobile;
import Entities.Charger;
import Entities.MobileCase;
import Entities.Product;
import Service.*;

import java.util.ArrayList;
import java.util.Scanner;

public class ProductManagement {
    public static void showAllProducts(ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        MenuUI menuUI = new MenuUI(new Scanner(System.in), null, mobiles, chargers, mobileCases);
        menuUI.showAllProducts();
    }

    public static void addNewProduct(Scanner input, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        MenuUI menuUI = new MenuUI(input, null, mobiles, chargers, mobileCases);
        menuUI.addNewProductMenu();
    }

    public static void deleteProduct(Scanner input, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        System.out.println("Delete Product");
        Product productToDelete = findExistingProduct(input, new ArrayList<>(mobiles));
        if (productToDelete == null) {
            productToDelete = findExistingProduct(input, new ArrayList<>(chargers));
        }
        if (productToDelete == null) {
            productToDelete = findExistingProduct(input, new ArrayList<>(mobileCases));
        }

        if (productToDelete != null) {
            if (productToDelete instanceof Mobile) {
                mobiles.remove(productToDelete);
            } else if (productToDelete instanceof Charger) {
                chargers.remove(productToDelete);
            } else if (productToDelete instanceof MobileCase) {
                mobileCases.remove(productToDelete);
            }
            System.out.println("Product deleted successfully.");
            FileService.writeProductsToCSV(mobiles, chargers, mobileCases);
        }
    }

    public static void editProduct(Scanner input, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        System.out.println("Edit Product");
        Product productToEdit = findExistingProduct(input, new ArrayList<>(mobiles));
        if (productToEdit == null) {
            productToEdit = findExistingProduct(input, new ArrayList<>(chargers));
        }
        if (productToEdit == null) {
            productToEdit = findExistingProduct(input, new ArrayList<>(mobileCases));
        }

        if (productToEdit != null) {
            if (productToEdit instanceof Mobile) {
                MobileService.editMobile((Mobile) productToEdit, input);
            } else if (productToEdit instanceof Charger) {
                ChargerService.editCharger((Charger) productToEdit, input);
            } else if (productToEdit instanceof MobileCase) {
                MobileCaseService.editMobileCase((MobileCase) productToEdit, input);
            }
            FileService.writeProductsToCSV(mobiles, chargers, mobileCases);
        }
    }

    private static Product findExistingProduct(Scanner input, ArrayList<? extends Product> products) {
        System.out.println("Enter product name or id to search: ");
        String searchQuery = input.nextLine();

        for (Product product : products) {
            if (product.getName().equalsIgnoreCase(searchQuery) || product.getId().equalsIgnoreCase(searchQuery)) {
                return product;
            }
        }
        System.out.println("Product not found.");
        return null;
    }
}

package Service;

import Controller.Customer;
import Entities.Product;
import Entities.Mobile;
import Entities.Charger;
import Entities.MobileCase;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class CartService {
    public static void addProductToCart(ArrayList<Product> cart,
                                        ArrayList<Mobile> mobiles,
                                        ArrayList<Charger> chargers,
                                        ArrayList<MobileCase> mobileCases,
                                        Scanner scanner)
    {
        System.out.print("Enter product type (1: Mobile, 2: Charger, 3: Mobile Case): ");
        int productType = Integer.parseInt(scanner.nextLine());

        System.out.print("Enter product ID to add to cart: ");
        String productId = scanner.nextLine();

        Product product = null;
        switch (productType) {
            case 1:
                product = MobileService.findMobileById(productId, mobiles);
                break;
            case 2:
                product = ChargerService.findChargerById(productId, chargers);
                break;
            case 3:
                product = MobileCaseService.findMobileCaseById(productId, mobileCases);
                break;
            default:
                System.out.println("Invalid product type.");
                return;
        }

        if (product != null) {
            try {
                System.out.print("Enter quantity: ");
                int quantity = Integer.parseInt(scanner.nextLine());

                if (quantity <= 0) {
                    throw new IllegalArgumentException("Quantity must be greater than 0.");
                }

                if (quantity > product.getStock()) {
                    throw new IllegalArgumentException("Not enough stock. Available: " + product.getStock());
                }

                for (int i = 0; i < quantity; i++) {
                    cart.add(product);
                }
                System.out.println(quantity + " " + product.getName() + "(s) added to cart.");
            } catch (NumberFormatException e) {
                System.out.println("Invalid quantity format. Please enter a number.");
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        } else {
            System.out.println("Product not found.");
        }
    }

    public static void showCart(ArrayList<Product> cart) {
        if (cart.isEmpty()) {
            System.out.println("Your cart is empty.");
        } else {
            Map<Product, Integer> productCounts = new HashMap<>();
            double cartTotal = 0;

            for (Product product : cart) {
                productCounts.put(product, productCounts.getOrDefault(product, 0) + 1);
                cartTotal += product.getPrice();
            }

            for (Map.Entry<Product, Integer> entry : productCounts.entrySet()) {
                Product product = entry.getKey();
                int amount = entry.getValue();
                double totalForProduct = product.getPrice() * amount;

                System.out.printf("Products: %s - Price: %s - Amount: %d; Total: %s%n",
                        product.getName(),
                        CurrencyFormatter.formatToVND(product.getPrice()),
                        amount,
                        CurrencyFormatter.formatToVND(totalForProduct));
            }

            System.out.println("Cart total: " + CurrencyFormatter.formatToVND(cartTotal));
        }
    }

    public static void checkout(ArrayList<Product> cart, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases, Customer customer) {
        if (cart.isEmpty()) {
            System.out.println("Your cart is empty. Please add products to your cart before checking out.");
        } else {
            System.out.println("===== Checkout =====");
            Map<Product, Integer> productCounts = new HashMap<>();
            double cartTotal = 0;

            for (Product product : cart) {
                productCounts.put(product, productCounts.getOrDefault(product, 0) + 1);
                cartTotal += product.getPrice();
            }

            for (Map.Entry<Product, Integer> entry : productCounts.entrySet()) {
                Product product = entry.getKey();
                int amount = entry.getValue();
                double totalForProduct = product.getPrice() * amount;

                System.out.printf("Products: %s - Price: %s - Amount: %d; Total: %s%n",
                        product.getName(),
                        CurrencyFormatter.formatToVND(product.getPrice()),
                        amount,
                        CurrencyFormatter.formatToVND(totalForProduct));
            }

            System.out.println("Cart total: " + CurrencyFormatter.formatToVND(cartTotal));

            Scanner scanner = new Scanner(System.in);
            System.out.print("Proceed to checkout? (yes/no): ");
            String confirm = scanner.nextLine();
            if (confirm.equalsIgnoreCase("yes")) {
                for (Map.Entry<Product, Integer> entry : productCounts.entrySet()) {
                    Product cartProduct = entry.getKey();
                    int amount = entry.getValue();
                    Product stockProduct = findProductInStock(cartProduct, mobiles, chargers, mobileCases);
                    if (stockProduct != null) {
                        stockProduct.setStock(stockProduct.getStock() - amount);
                    }
                }
                PurchaseHistoryService.addPurchaseToHistory(customer, new ArrayList<>(productCounts.keySet()), cartTotal);
                System.out.println("Checkout complete. Thank you for your purchase!");
                cart.clear();
                FileService.writeProductsToCSV(mobiles, chargers, mobileCases);
            } else {
                System.out.println("Checkout canceled.");
            }
        }
    }

    private static Product findProductInStock(Product product, ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        if (product instanceof Mobile) {
            return MobileService.findMobileById(product.getId(), mobiles);
        } else if (product instanceof Charger) {
            return ChargerService.findChargerById(product.getId(), chargers);
        } else if (product instanceof MobileCase) {
            return MobileCaseService.findMobileCaseById(product.getId(), mobileCases);
        }
        return null;
    }
}

package Service;

import Entities.Charger;
import Factory.ChargerFactory;

import java.util.ArrayList;
import java.util.Scanner;

public class ChargerService extends ProductService {
    public static void addCharger(ArrayList<Charger> chargers, Scanner input) {
        ChargerFactory factory = new ChargerFactory();
        Charger newCharger = (Charger) factory.createProduct(input);
        chargers.add(newCharger);
        System.out.println("Charger added successfully.");
    }

    public static void editCharger(Charger charger, Scanner input) {
        System.out.println("Editing Charger: " + charger.getName());
        editCommonFields(charger, input);
        System.out.println("Enter new cable type: ");
        charger.setCableType(input.nextLine());
        System.out.println("Enter new cable length: ");
        charger.setCableLength(input.nextLine());
    }

    public static Charger findChargerById(String id, ArrayList<Charger> chargers) {
        for (Charger charger : chargers) {
            if (charger.getId().equals(id)) {
                return charger;
            }
        }
        return null;
    }
}

package Service;

import java.text.DecimalFormat;

public class CurrencyFormatter {


        private static final DecimalFormat VND_FORMATTER = new DecimalFormat("###,###,### VNĐ");

        public static String formatToVND(double amount) {
            return VND_FORMATTER.format(amount);
        }


}


package Service;

import Controller.Customer;
import java.util.ArrayList;

public class CustomerService {

    public static void addCustomer(ArrayList<Customer> customers, String username, String password) {
        customers.add(new Customer(username, password));
        FileService.writeCustomersToCSV(customers);
    }

    public static Customer findCustomerByUsername(ArrayList<Customer> customers, String username) {
        for (Customer customer : customers) {
            if (customer.getUsername().equals(username)) {
                return customer;
            }
        }
        return null;
    }
}

package Service;

import Controller.Customer;
import Entities.Mobile;
import Entities.Charger;
import Entities.MobileCase;
import java.io.*;
import java.util.ArrayList;

public class FileService {
    private static final String CSV_FILE_PATH = "products.csv";
    private static final String CUSTOMERS_CSV_FILE_PATH = "customers.csv";

    public static void readProductsFromCSV(ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        mobiles.clear();
        chargers.clear();
        mobileCases.clear();
        try (BufferedReader br = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                String type = values[0];
                switch (type) {
                    case "Mobile":
                        mobiles.add(new Mobile.Builder()
                                .setName(values[1])
                                .setBrand(values[2])
                                .setId(values[3])
                                .setColor(values[4])
                                .setPrice(Integer.parseInt(values[5]))
                                .setStock(Integer.parseInt(values[6]))
                                .setStatus(values[7])
                                .setOs(values[8])
                                .build());
                        break;
                    case "Charger":
                        chargers.add(new Charger.Builder()
                                .setName(values[1])
                                .setBrand(values[2])
                                .setId(values[3])
                                .setColor(values[4])
                                .setPrice(Integer.parseInt(values[5]))
                                .setStock(Integer.parseInt(values[6]))
                                .setStatus(values[7])
                                .setCableType(values[8])
                                .setCableLength(values[9])
                                .build());
                        break;
                    case "MobileCase":
                        mobileCases.add(new MobileCase.Builder()
                                .setName(values[1])
                                .setBrand(values[2])
                                .setId(values[3])
                                .setColor(values[4])
                                .setPrice(Integer.parseInt(values[5]))
                                .setStock(Integer.parseInt(values[6]))
                                .setStatus(values[7])
                                .setUseFor(values[8])
                                .build());
                        break;
                }
            }
        } catch (IOException e) {
            System.out.println("No existing products data found. Starting with an empty product list.");
        }
    }

    public static void writeProductsToCSV(ArrayList<Mobile> mobiles, ArrayList<Charger> chargers, ArrayList<MobileCase> mobileCases) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(CSV_FILE_PATH))) {
            for (Mobile mobile : mobiles) {
                bw.write("Mobile," + mobile.toCSV());
                bw.newLine();
            }
            for (Charger charger : chargers) {
                bw.write("Charger," + charger.toCSV());
                bw.newLine();
            }
            for (MobileCase mobileCase : mobileCases) {
                bw.write("MobileCase," + mobileCase.toCSV());
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void readCustomersFromCSV(ArrayList<Customer> customers) {
        customers.clear();
        try (BufferedReader br = new BufferedReader(new FileReader(CUSTOMERS_CSV_FILE_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                customers.add(new Customer(values[0], values[1]));
            }
        } catch (IOException e) {
            System.out.println("No existing customers data found. Starting with an empty customer list.");
        }
    }

    public static void writeCustomersToCSV(ArrayList<Customer> customers) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(CUSTOMERS_CSV_FILE_PATH))) {
            for (Customer customer : customers) {
                bw.write(customer.getUsername() + "," + customer.getPassword());
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

package Service;

import Entities.MobileCase;
import Factory.MobileCaseFactory;

import java.util.ArrayList;
import java.util.Scanner;

public class MobileCaseService extends ProductService {
    public static void addMobileCase(ArrayList<MobileCase> mobileCases, Scanner input) {
        MobileCaseFactory factory = new MobileCaseFactory();
        MobileCase newMobileCase = (MobileCase) factory.createProduct(input);
        mobileCases.add(newMobileCase);
        System.out.println("Mobile Case added successfully.");
    }

    public static void editMobileCase(MobileCase mobileCase, Scanner input) {
        System.out.println("Editing Mobile Case: " + mobileCase.getName());
        editCommonFields(mobileCase, input);
        System.out.println("Enter new mobile suit: ");
        mobileCase.setUseFor(input.nextLine());
    }

    public static MobileCase findMobileCaseById(String id, ArrayList<MobileCase> mobileCases) {
        for (MobileCase mobileCase : mobileCases) {
            if (mobileCase.getId().equals(id)) {
                return mobileCase;
            }
        }
        return null;
    }
}

package Service;

import Entities.Mobile;
import Factory.MobileFactory;

import java.util.ArrayList;
import java.util.Scanner;

public class MobileService extends ProductService {
    public static void addMobile(ArrayList<Mobile> mobiles, Scanner input) {
        MobileFactory factory = new MobileFactory();
        Mobile newMobile = (Mobile) factory.createProduct(input);
        mobiles.add(newMobile);
        System.out.println("Mobile added successfully.");
    }

    public static void editMobile(Mobile mobile, Scanner input) {
        System.out.println("Editing Mobile: " + mobile.getName());
        editCommonFields(mobile, input);
        System.out.println("Enter new OS: ");
        mobile.setOs(input.nextLine());
    }

    public static Mobile findMobileById(String id, ArrayList<Mobile> mobiles) {
        for (Mobile mobile : mobiles) {
            if (mobile.getId().equals(id)) {
                return mobile;
            }
        }
        return null;
    }
}

package Service;

import Entities.Product;
import java.util.Scanner;

public class ProductService {

    protected static void editCommonFields(Product product, Scanner input) {
        System.out.println("1. Edit Name");
        System.out.println("2. Edit Brand");
        System.out.println("3. Edit ID");
        System.out.println("4. Edit Color");
        System.out.println("5. Edit Price");
        System.out.println("6. Edit Stock");
        System.out.println("7. Edit Status");
        System.out.println("0. Finish Editing");

        int choice;
        do {
            choice = Integer.parseInt(input.nextLine());
            switch (choice) {
                case 1:
                    System.out.println("Enter new name: ");
                    product.setName(input.nextLine());
                    break;
                case 2:
                    System.out.println("Enter new brand: ");
                    product.setBrand(input.nextLine());
                    break;
                case 3:
                    System.out.println("Enter new ID: ");
                    product.setId(input.nextLine());
                    break;
                case 4:
                    System.out.println("Enter new color: ");
                    product.setColor(input.nextLine());
                    break;
                case 5:
                    System.out.println("Enter new price: ");
                    product.setPrice(Integer.parseInt(input.nextLine()));
                    break;
                case 6:
                    System.out.println("Enter new stock: ");
                    product.setStock(Integer.parseInt(input.nextLine()));
                    break;
                case 7:
                    System.out.println("Enter new status: ");
                    product.setStatus(input.nextLine());
                    break;
                case 0:
                    System.out.println("Finished editing common fields.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);
    }
}

package Service;

import Controller.Customer;
import Entities.Product;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class PurchaseHistoryService {
    private static final String PURCHASE_HISTORY_FILE = "purchase_history.csv";
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    public static void addPurchaseToHistory(Customer customer, List<Product> products, double totalAmount) {
        LocalDateTime purchaseDate = LocalDateTime.now();
        StringBuilder purchaseRecord = new StringBuilder();
        purchaseRecord.append(String.format("%s,%s,", customer.getUsername(), purchaseDate.format(DATE_FORMATTER)));

        Map<Product, Integer> productCounts = new HashMap<>();
        for (Product product : products) {
            productCounts.put(product, productCounts.getOrDefault(product, 0) + 1);
        }

        for (Map.Entry<Product, Integer> entry : productCounts.entrySet()) {
            Product product = entry.getKey();
            int count = entry.getValue();
            purchaseRecord.append(String.format("%s:%d:%d;", product.getName(), product.getPrice(), count));
        }
        purchaseRecord.append(String.format(",%.2f", totalAmount));

        try (FileWriter fw = new FileWriter(PURCHASE_HISTORY_FILE, true);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            out.println(purchaseRecord);
        } catch (IOException e) {
            System.out.println("Error writing to purchase history file: " + e.getMessage());
        }
    }

    public static Map<String, List<String>> getCustomerPurchaseHistory(String username) {
        Map<String, List<String>> history = new LinkedHashMap<>();
        double totalPurchased = 0;
        try (BufferedReader br = new BufferedReader(new FileReader(PURCHASE_HISTORY_FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 2 && parts[0].equals(username)) {
                    String date = parts[1];
                    StringBuilder entry = new StringBuilder();
                    entry.append(String.format("Date: %s - Products: ", date));

                    double total = 0;
                    if (parts.length >= 3) {
                        String[] products = parts[2].split(";");
                        for (String product : products) {
                            String[] productInfo = product.split(":");
                            if (productInfo.length >= 3) {
                                entry.append(String.format("%s - Price: %s - Amount: %s; ",
                                        productInfo[0],
                                        CurrencyFormatter.formatToVND(Double.parseDouble(productInfo[1])),
                                        productInfo[2]));
                            }
                        }
                    }

                    if (parts.length >= 4) {
                        total = Double.parseDouble(parts[3]);
                    }

                    totalPurchased += total;
                    entry.append(String.format("Total: %s", CurrencyFormatter.formatToVND(total)));

                    history.computeIfAbsent(username, k -> new ArrayList<>()).add(entry.toString());
                }
            }
            history.put("Total", Collections.singletonList(CurrencyFormatter.formatToVND(totalPurchased)));
        } catch (IOException | NumberFormatException e) {
            System.out.println("Error reading purchase history file: " + e.getMessage());
        }
        return history;
    }

    public static Map<String, Map<String, List<String>>> getAllCustomersPurchaseHistory() {
        Map<String, Map<String, List<String>>> allHistory = new LinkedHashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(PURCHASE_HISTORY_FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",", 4);
                String username = parts[0];
                allHistory.putIfAbsent(username, getCustomerPurchaseHistory(username));
            }
        } catch (IOException e) {
            System.out.println("Error reading purchase history file: " + e.getMessage());
        }
        return allHistory;
    }
}
